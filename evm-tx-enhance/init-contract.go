package query

import (
	"context"
	"crypto/ecdsa"
	"fmt"
	"math/big"
	"strconv"
	"strings"
	"time"

	"github.com/ethereum/go-ethereum/accounts/abi"
	ethcommon "github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	ethcompatible "github.com/okex/exchain-ethereum-compatible/utils"
	"github.com/okex/exchain-go-sdk/utils"
	"github.com/spf13/cobra"
)

var (
	deployedHost     string
	deployedPrivkey string
)

func DeployCmd() *cobra.Command {
	// add flags
	cmd := &cobra.Command{
		Use:   "deploy-contract",
		Short: "",
		Long:  "",
		Run:   DeployContract,
	}

	flags := cmd.Flags()
	flags.StringVar(&deployedHost, "deployed-host", "", "")
	flags.StringVar(&deployedPrivkey, "deployed-privkey", "", "")

	return cmd
}

func DeployContract(cmd *cobra.Command, args []string) {
	// 0.1 init client
	client := initClient(deployedHost)
	// 0.2 get the chain-id from network
	chainID := fetchNetworkId(client)
	// 0.3 unencrypted private key -> secp256k1 private key
	privateKey := initPrivKey(deployedPrivkey)
	// 0.4 secp256k1 private key -> pubkey -> address
	fromAddress := getPublicAddress(privateKey)
	// 0.5 get the value of nonce, based on address
	nonce := fetchNonce(client, fromAddress)

	var tokenAddrs []ethcommon.Address
	for i := 0; i < 4 ; i++ {
		// 1. simulate unsignedTx as you want, fill out the parameters into a unsignedTx
		unsignedTx := simulateTestTokenTx(
			nonce,
			"TEST COMPANY"+strconv.FormatInt(int64(i), 10),
			"TEST"+strconv.FormatInt(int64(i), 10),
			uint8(8),
			fromAddress,
			)
		receipt := getRecipet(unsignedTx, privateKey, chainID, client)
		tokenAddrs = append(tokenAddrs, receipt.ContractAddress)
		nonce++
	}

	unsignedTx := simulateBenchTx(
		nonce,
		tokenAddrs,
	)
	receipt := getRecipet(unsignedTx, privateKey, chainID, client)
	fmt.Println(receipt.ContractAddress)
}

// initClient initializes client
func initClient(host string) *ethclient.Client {
	client, err := ethclient.Dial(host)
	if err != nil {
		panic(fmt.Errorf("failed to initialize client: %+v", err))
	}
	return client
}

// fetchNetworkId gets the network-id from chain
func fetchNetworkId(client *ethclient.Client) *big.Int {
	// 0.5 get the chain-id from network
	chainID, err := client.NetworkID(context.Background())
	if err != nil {
		panic(fmt.Errorf("failed to fetch the chain-id from network: %+v", err))
	}
	fmt.Println("chain-id:", chainID)
	return chainID
}

// fetchNonce gets the current nonce of an address
func fetchNonce(client *ethclient.Client, addr ethcommon.Address) uint64 {
	nonce, err := client.PendingNonceAt(context.Background(), addr)
	if err != nil {
		panic(fmt.Errorf("failed to fetch the value of nonce from network: %+v", err))
	}
	fmt.Println("nonce:", nonce)
	return nonce
}

// initPrivKey makes unencrypted private key -> secp256k1 private key
func initPrivKey(hexkey string) *ecdsa.PrivateKey {
	privateKey, err := crypto.HexToECDSA(hexkey)
	if err != nil {
		panic(fmt.Errorf("failed to switch unencrypted private key -> secp256k1 private key: %+v", err))
	}
	return privateKey
}

// getPublicAddress makes secp256k1 private key -> pubkey -> address
func getPublicAddress(privateKey *ecdsa.PrivateKey) ethcommon.Address {
	pubkey := privateKey.Public()
	pubkeyECDSA, ok := pubkey.(*ecdsa.PublicKey)
	if !ok {
		panic(fmt.Errorf("failed to switch secp256k1 private key -> pubkey"))
	}
	fromAddress := crypto.PubkeyToAddress(*pubkeyECDSA)
	fmt.Println("from address:", fromAddress.String())
	return fromAddress
}

func simulateTestTokenTx(nonce uint64, name, symbol string, decimal uint8, from ethcommon.Address) *types.Transaction {
	value := big.NewInt(0)
	gasLimit := uint64(30000000)                // in units
	gasPrice := big.NewInt(100000000)

	builder, err := utils.NewPayloadBuilder(TestTokenBin, TestTokenABI)
	if err != nil {
		panic(err)
	}
	payload, err := builder.Build("", name, symbol, decimal, from)
	if err != nil {
		panic(err)
	}
	//2. remove 0x in the bin and convert to byte array
	//bin := TestTokenBin
	//byteCode := ethcommon.Hex2Bytes(bin[2:])
	//
	//abiStr := TestTokenABI
	//// 3. create input byte array. this consists of constructor arguments
	//testabi, _ := abi.JSON(strings.NewReader(abiStr))
	//
	//input, _ := testabi.Pack("", args) 	//input,_ := testabi.Pack("",arg1,arg2,arg3)
	//
	//byteCode = append(byteCode, input...)
	return types.NewContractCreation(nonce, value, gasLimit, gasPrice, payload)
}

func simulateBenchTx(nonce uint64, addrs []ethcommon.Address) *types.Transaction {
	value := big.NewInt(0)
	gasLimit := uint64(30000000)                // in units
	gasPrice := big.NewInt(100000000)

	//2. remove 0x in the bin and convert to byte array
	bin := BenchTestBin
	byteCode := ethcommon.Hex2Bytes(bin[2:])

	abiStr := BenchTestABI
	// 3. create input byte array. this consists of constructor arguments
	testabi, _ := abi.JSON(strings.NewReader(abiStr))

	input, _ := testabi.Pack("", addrs) 	//input,_ := testabi.Pack("",arg1,arg2,arg3)

	byteCode = append(byteCode, input...)
	return types.NewContractCreation(nonce, value, gasLimit, gasPrice, byteCode)
}

func getRecipet(unsignedTx *types.Transaction, privateKey *ecdsa.PrivateKey, chainID *big.Int, client *ethclient.Client) *types.Receipt {
	// 2. sign unsignedTx -> rawTx
	signedTx, err := types.SignTx(unsignedTx, types.NewEIP155Signer(chainID), privateKey)
	if err != nil {
		panic(err)
	}

	// 3. send rawTx
	err = client.SendTransaction(context.Background(), signedTx)
	if err != nil {
		panic(err)
	}
	// 4. get the contract address based on tx hash
	hash, _ := ethcompatible.Hash(signedTx)
	fmt.Println("txhash:", hash.String())
	time.Sleep(time.Second*5)
	receipt, err := client.TransactionReceipt(context.Background(), hash)
	if err != nil {
		panic(err)
	}
	return receipt
}

var (
	TestTokenBin = `0x60806040523480156200001157600080fd5b50604051620017b9380380620017b983398181016040528101906200003791906200021f565b83600090805190602001906200004f929190620000cf565b50826001908051906020019062000068929190620000cf565b5081600260006101000a81548160ff021916908360ff16021790555080600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000463565b828054620000dd906200039b565b90600052602060002090601f0160209004810192826200010157600085556200014d565b82601f106200011c57805160ff19168380011785556200014d565b828001600101855582156200014d579182015b828111156200014c5782518255916020019190600101906200012f565b5b5090506200015c919062000160565b5090565b5b808211156200017b57600081600090555060010162000161565b5090565b6000620001966200019084620002f1565b620002bd565b905082815260208101848484011115620001af57600080fd5b620001bc84828562000365565b509392505050565b600081519050620001d5816200042f565b92915050565b600082601f830112620001ed57600080fd5b8151620001ff8482602086016200017f565b91505092915050565b600081519050620002198162000449565b92915050565b600080600080608085870312156200023657600080fd5b600085015167ffffffffffffffff8111156200025157600080fd5b6200025f87828801620001db565b945050602085015167ffffffffffffffff8111156200027d57600080fd5b6200028b87828801620001db565b93505060406200029e8782880162000208565b9250506060620002b187828801620001c4565b91505092959194509250565b6000604051905081810181811067ffffffffffffffff82111715620002e757620002e662000400565b5b8060405250919050565b600067ffffffffffffffff8211156200030f576200030e62000400565b5b601f19601f8301169050602081019050919050565b6000620003318262000338565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b60005b838110156200038557808201518184015260208101905062000368565b8381111562000395576000848401525b50505050565b60006002820490506001821680620003b457607f821691505b60208210811415620003cb57620003ca620003d1565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200043a8162000324565b81146200044657600080fd5b50565b620004548162000358565b81146200046057600080fd5b50565b61134680620004736000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806340c10f191161007157806340c10f191461016857806370a082311461019857806395d89b41146101c85780639dc29fac146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c3919061107b565b60405180910390f35b6100e660048036038101906100e19190610f3e565b610308565b6040516100f39190611060565b60405180910390f35b6101046103fa565b60405161011191906110dd565b60405180910390f35b610134600480360381019061012f9190610eef565b610404565b6040516101419190611060565b60405180910390f35b6101526107d6565b60405161015f91906110f8565b60405180910390f35b610182600480360381019061017d9190610f3e565b6107ed565b60405161018f9190611060565b60405180910390f35b6101b260048036038101906101ad9190610e8a565b610803565b6040516101bf91906110dd565b60405180910390f35b6101d061084c565b6040516101dd919061107b565b60405180910390f35b61020060048036038101906101fb9190610f3e565b6108de565b60405161020d9190611060565b60405180910390f35b610230600480360381019061022b9190610f3e565b610a70565b60405161023d9190611060565b60405180910390f35b610260600480360381019061025b9190610eb3565b610a87565b60405161026d91906110dd565b60405180910390f35b60606000805461028590611241565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190611241565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103e891906110dd565b60405180910390a36001905092915050565b6000600354905090565b60008373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806104bc5750600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b6104fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f2906110bd565b60405180910390fd5b610506848484610b0e565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156105de57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156107cb57610669600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610d12565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516107c291906110dd565b60405180910390a35b600190509392505050565b6000600260009054906101000a900460ff16905090565b60006107f98383610d35565b6001905092915050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461085b90611241565b80601f016020809104026020016040519081016040528092919081815260200182805461088790611241565b80156108d45780601f106108a9576101008083540402835291602001916108d4565b820191906000526020600020905b8154815290600101906020018083116108b757829003601f168201915b5050505050905090565b600081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610962576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109599061109d565b60405180910390fd5b6109ab600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610d12565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109fa60035483610d12565b600381905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a5e91906110dd565b60405180910390a36001905092915050565b6000610a7d338484610b0e565b6001905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610b90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b879061109d565b60405180910390fd5b610bd9600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610d12565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c65600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610e3d565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d0591906110dd565b60405180910390a3505050565b6000828284610d219190611185565b9150811115610d2f57600080fd5b92915050565b610d7e600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610e3d565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dcd60035482610e3d565b6003819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e3191906110dd565b60405180910390a35050565b6000828284610e4c919061112f565b9150811015610e5a57600080fd5b92915050565b600081359050610e6f816112e2565b92915050565b600081359050610e84816112f9565b92915050565b600060208284031215610e9c57600080fd5b6000610eaa84828501610e60565b91505092915050565b60008060408385031215610ec657600080fd5b6000610ed485828601610e60565b9250506020610ee585828601610e60565b9150509250929050565b600080600060608486031215610f0457600080fd5b6000610f1286828701610e60565b9350506020610f2386828701610e60565b9250506040610f3486828701610e75565b9150509250925092565b60008060408385031215610f5157600080fd5b6000610f5f85828601610e60565b9250506020610f7085828601610e75565b9150509250929050565b610f83816111cb565b82525050565b6000610f9482611113565b610f9e818561111e565b9350610fae81856020860161120e565b610fb7816112d1565b840191505092915050565b6000610fcf60148361111e565b91507f4552525f494e53554646494349454e545f42414c0000000000000000000000006000830152602082019050919050565b600061100f60158361111e565b91507f4552525f42544f4b454e5f4241445f43414c4c455200000000000000000000006000830152602082019050919050565b61104b816111f7565b82525050565b61105a81611201565b82525050565b60006020820190506110756000830184610f7a565b92915050565b600060208201905081810360008301526110958184610f89565b905092915050565b600060208201905081810360008301526110b681610fc2565b9050919050565b600060208201905081810360008301526110d681611002565b9050919050565b60006020820190506110f26000830184611042565b92915050565b600060208201905061110d6000830184611051565b92915050565b600081519050919050565b600082825260208201905092915050565b600061113a826111f7565b9150611145836111f7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561117a57611179611273565b5b828201905092915050565b6000611190826111f7565b915061119b836111f7565b9250828210156111ae576111ad611273565b5b828203905092915050565b60006111c4826111d7565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561122c578082015181840152602081019050611211565b8381111561123b576000848401525b50505050565b6000600282049050600182168061125957607f821691505b6020821081141561126d5761126c6112a2565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6112eb816111b9565b81146112f657600080fd5b50565b611302816111f7565b811461130d57600080fd5b5056fea2646970667358221220a704abcde942c438605e32786e6832086806ed12f817baba1734311bc32fa42864736f6c63430008000033`
	TestTokenABI = `[
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "symbol",
				"type": "string"
			},
			{
				"internalType": "uint8",
				"name": "decimals",
				"type": "uint8"
			},
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "src",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "dst",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amt",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "src",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "dst",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amt",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "src",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "dst",
				"type": "address"
			}
		],
		"name": "allowance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "dst",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amt",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "whom",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amt",
				"type": "uint256"
			}
		],
		"name": "burn",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "decimals",
		"outputs": [
			{
				"internalType": "uint8",
				"name": "",
				"type": "uint8"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "dst",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amt",
				"type": "uint256"
			}
		],
		"name": "mint",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "symbol",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalSupply",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "dst",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amt",
				"type": "uint256"
			}
		],
		"name": "transfer",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "src",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "dst",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amt",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]`

	BenchTestBin = `0x60806040523480156200001157600080fd5b5060405162000f2d38038062000f2d8339818101604052810190620000379190620001be565b80600090805190602001906200004f92919062000057565b5050620002e3565b828054828255906000526020600020908101928215620000d3579160200282015b82811115620000d25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000078565b5b509050620000e29190620000e6565b5090565b5b8082111562000101576000816000905550600101620000e7565b5090565b60006200011c620001168462000237565b62000203565b905080838252602082019050828560208602820111156200013c57600080fd5b60005b858110156200017057816200015588826200017a565b8452602084019350602083019250506001810190506200013f565b5050509392505050565b6000815190506200018b81620002c9565b92915050565b600082601f830112620001a357600080fd5b8151620001b584826020860162000105565b91505092915050565b600060208284031215620001d157600080fd5b600082015167ffffffffffffffff811115620001ec57600080fd5b620001fa8482850162000191565b91505092915050565b6000604051905081810181811067ffffffffffffffff821117156200022d576200022c6200029a565b5b8060405250919050565b600067ffffffffffffffff8211156200025557620002546200029a565b5b602082029050602081019050919050565b600062000273826200027a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002d48162000266565b8114620002e057600080fd5b50565b610c3a80620002f36000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634f64b2be1461003b5780637159a6181461006b575b600080fd5b610055600480360381019061005091906106ac565b610075565b604051610062919061086a565b60405180910390f35b6100736100b4565b005b6000818154811061008557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b905060008060005b61012c81101561035457600081436100fa9190610a3b565b40905060005a90508181878560405160200161011994939291906108ae565b6040516020818303038152906040528051906020012095506000605a846101409190610b47565b141561033f576000808054905060015461015a9190610b47565b81548110610191577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694506101dc816101d76001548661035a90919063ffffffff16565b610370565b93508473ffffffffffffffffffffffffffffffffffffffff166340c10f1930866040518363ffffffff1660e01b8152600401610219929190610885565b602060405180830381600087803b15801561023357600080fd5b505af1158015610247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026b9190610683565b506102778533866103c1565b6102828533866104f7565b8473ffffffffffffffffffffffffffffffffffffffff16639dc29fac336102b360038861062d90919063ffffffff16565b6040518363ffffffff1660e01b81526004016102d0929190610885565b602060405180830381600087803b1580156102ea57600080fd5b505af11580156102fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103229190610683565b506103386001805461064390919063ffffffff16565b6001819055505b5050808061034c90610af4565b9150506100e2565b50505050565b6000818361036891906109e1565b905092915050565b6000804284846040516020016103889392919061082d565b6040516020818303038152906040528051906020012060001c905068056bc75e2d63100000816103b89190610b47565b91505092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b385856040516024016103f3929190610885565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104419190610816565b6000604051808303816000865af19150503d806000811461047e576040519150601f19603f3d011682016040523d82523d6000602084013e610483565b606091505b50915091508180156104b157506000815114806104b05750808060200190518101906104af9190610683565b5b5b6104f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e7906108f3565b60405180910390fd5b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401610529929190610885565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105779190610816565b6000604051808303816000865af19150503d80600081146105b4576040519150601f19603f3d011682016040523d82523d6000602084013e6105b9565b606091505b50915091508180156105e757506000815114806105e65750808060200190518101906105e59190610683565b5b5b610626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061d90610913565b60405180910390fd5b5050505050565b6000818361063b91906109b0565b905092915050565b60008183610651919061095a565b905092915050565b60008151905061066881610bd6565b92915050565b60008135905061067d81610bed565b92915050565b60006020828403121561069557600080fd5b60006106a384828501610659565b91505092915050565b6000602082840312156106be57600080fd5b60006106cc8482850161066e565b91505092915050565b6106de81610a6f565b82525050565b6106ed81610a8d565b82525050565b60006106fe82610933565b610708818561093e565b9350610718818560208601610ac1565b80840191505092915050565b6000610731602b83610949565b91507f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060008301527f726f7665206661696c65640000000000000000000000000000000000000000006020830152604082019050919050565b6000610797602d83610949565b91507f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008301527f616e73666572206661696c6564000000000000000000000000000000000000006020830152604082019050919050565b6107f981610ab7565b82525050565b61081061080b82610ab7565b610b3d565b82525050565b600061082282846106f3565b915081905092915050565b600061083982866107ff565b60208201915061084982856107ff565b60208201915061085982846107ff565b602082019150819050949350505050565b600060208201905061087f60008301846106d5565b92915050565b600060408201905061089a60008301856106d5565b6108a760208301846107f0565b9392505050565b60006080820190506108c360008301876106e4565b6108d060208301866107f0565b6108dd60408301856106e4565b6108ea60608301846107f0565b95945050505050565b6000602082019050818103600083015261090c81610724565b9050919050565b6000602082019050818103600083015261092c8161078a565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061096582610ab7565b915061097083610ab7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156109a5576109a4610b78565b5b828201905092915050565b60006109bb82610ab7565b91506109c683610ab7565b9250826109d6576109d5610ba7565b5b828204905092915050565b60006109ec82610ab7565b91506109f783610ab7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a3057610a2f610b78565b5b828202905092915050565b6000610a4682610ab7565b9150610a5183610ab7565b925082821015610a6457610a63610b78565b5b828203905092915050565b6000610a7a82610a97565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610adf578082015181840152602081019050610ac4565b83811115610aee576000848401525b50505050565b6000610aff82610ab7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b3257610b31610b78565b5b600182019050919050565b6000819050919050565b6000610b5282610ab7565b9150610b5d83610ab7565b925082610b6d57610b6c610ba7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610bdf81610a81565b8114610bea57600080fd5b50565b610bf681610ab7565b8114610c0157600080fd5b5056fea26469706673582212207c2ef5f06aec7dd0c2cba4e1ae0dbbb08ac51d07a50d645654313255f6204aa864736f6c63430008000033`
	BenchTestABI = `[
	{
		"inputs": [
			{
				"internalType": "address[]",
				"name": "_tokens",
				"type": "address[]"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [],
		"name": "operate",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "tokens",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]`
)